{"version":3,"sources":["context.js","SetupForm.js","Loading.js","Modal.js","App.js","index.js"],"names":["table","sports","history","politics","AppContext","React","createContext","AppProvider","children","useState","questions","setQuestions","isLoading","setIsLoading","correctAnswers","setCorrectAnswers","index","setIndex","start","setStart","isEnd","setIsEnd","category","amount","difficulty","input","setInput","fetchData","url","a","fetch","response","json","data","newQuestions","results","map","q","question","type","dificulty","incorrect_answers","correct_answer","choices","console","log","handleNext","length","Provider","value","handleAnswers","e","target","innerText","handleStart","preventDefault","URL_constructor","handleChange","name","replayGame","useGlobalContext","useContext","SetupForm","questionNumber","className","Math","round","onClick","array","i","j","floor","random","temp","shuffleArray","choice","key","Loading","Modal","onSubmit","htmlFor","id","min","max","defaultValue","onChange","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da393f27.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React, { useState, useContext, useEffect } from \"react\";\n\nconst table = {\n  sports: 21,\n  history: 23,\n  politics: 24,\n};\n\nconst AppContext = React.createContext();\nconst AppProvider = ({ children }) => {\n  const [questions, setQuestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [start, setStart] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n  const [input, setInput] = useState({\n    category: \"sports\",\n    amount: \"10\",\n    difficulty: \"easy\",\n  });\n\n  const fetchData = async (url) => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data) {\n        const newQuestions = data.results.map((q) => {\n          const {\n            question,\n            category,\n            type,\n            dificulty,\n            incorrect_answers,\n            correct_answer,\n          } = q;\n          return {\n            question,\n            category,\n            type,\n            dificulty,\n            incorrect_answers,\n            correct_answer,\n            choices: [...incorrect_answers, correct_answer],\n          };\n        });\n\n        setQuestions(newQuestions);\n        setIsLoading(false);\n      }\n    } catch (error) {\n      setIsLoading(false);\n      console.log(error);\n    }\n  };\n  const handleStart = (e) => {\n    e.preventDefault();\n    const API_ENDPOINT = \"https://opentdb.com/api.php?\";\n    const URL_constructor = `amount=${input.amount}&category=${\n      table[input.category]\n    }&difficulty=${input.difficulty}`;\n    const url = `${API_ENDPOINT}${URL_constructor}`;\n    fetchData(url);\n    setIsEnd(false);\n    setCorrectAnswers(0);\n    setStart(true);\n  };\n  const handleChange = (e) => {\n    e.preventDefault();\n    const value = e.target.value;\n    const name = e.target.name;\n    setInput({ ...input, [name]: value });\n  };\n\n  const handleNext = () => {\n    if (index >= questions.length - 1) {\n      setIsEnd(true);\n    } else {\n      setIndex(index + 1);\n    }\n  };\n\n  const handleAnswers = (e, correct_answer) => {\n    if (e.target.innerText === correct_answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n    handleNext();\n  };\n  const replayGame = () => {\n    console.log(\"end\");\n    setIsEnd(true);\n    setStart(false);\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        questions,\n        isLoading,\n        correctAnswers,\n        index,\n        handleNext,\n        handleAnswers,\n        handleStart,\n        handleChange,\n        start,\n        isEnd,\n        setIsEnd,\n        setStart,\n        input,\n        replayGame,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\nconst shuffleArray = (array) => {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\nconst SetupForm = () => {\n  const {\n    questions,\n    index,\n    handleNext,\n    handleAnswers,\n    correctAnswers,\n    isEnd,\n    setStart,\n    replayGame,\n  } = useGlobalContext();\n  if (questions.length == 0) {\n    return <h1>loading</h1>;\n  }\n\n  const questionNumber = questions.length;\n\n  const { question, correct_answer, choices } = questions[index];\n\n  return (\n    <>\n      <div className={isEnd ? `modal-container isOpen` : `modal-container`}>\n        <div className=\"modal-content\">\n          <h2>Congrats!</h2>\n          <p>\n            {`You answered ${Math.round(\n              (correctAnswers / questionNumber) * 100\n            )}% of questions\n            correctly`}\n          </p>\n          <button className=\"close-btn\" onClick={replayGame}>\n            play again\n          </button>\n        </div>\n      </div>\n      <section className=\"quiz\">\n        <p className=\"correct-answers\">\n          {`Correct Answers: ${correctAnswers} out of ${questionNumber}`}\n        </p>\n        <article className=\"container\">\n          <h2>{question}</h2>\n          <div className=\"btn-container\">\n            {shuffleArray(choices).map((choice, index) => {\n              return (\n                <button\n                  key={index}\n                  className=\"answer-btn\"\n                  onClick={(e) => handleAnswers(e, correct_answer)}\n                >\n                  {choice}\n                </button>\n              );\n            })}\n          </div>\n        </article>\n        <button className=\"next-question\" onClick={handleNext}>\n          Next Question\n        </button>\n      </section>\n    </>\n  );\n};\n\nexport default SetupForm;\n","import React from 'react'\n\nconst Loading = () => {\n  return (\n    <main>\n      <div className='loading'></div>\n    </main>\n  )\n}\n\nexport default Loading\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\n\nconst Modal = () => {\n  const { handleStart, handleChange, input } = useGlobalContext();\n  return (\n    <section className=\"quiz quiz-small\">\n      <form className=\"setup-form\" onSubmit={(e) => handleStart(e)}>\n        <h2>Setup Quiz</h2>\n        <div className=\"formControl\">\n          <label htmlFor=\"amount\">number of questions</label>\n          <input\n            type=\"number\"\n            name=\"amount\"\n            id=\"amount\"\n            className=\"form-input\"\n            min=\"1\"\n            max=\"50\"\n            defaultValue=\"10\"\n            value={input.amount}\n            onChange={handleChange}\n          ></input>\n        </div>\n        <div className=\"formControl\">\n          <label htmlFor=\"Category\">Choose Category</label>\n          <select\n            name=\"category\"\n            id=\"category\"\n            className=\"form-input\"\n            value={input.category}\n            onChange={handleChange}\n          >\n            <option defaultValue=\"sports\">sports</option>\n            <option defaultValue=\"history\">history</option>\n            <option defaultValue=\"politics\">politics</option>\n          </select>\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"difficulty\">select difficulty</label>\n          <select\n            name=\"difficulty\"\n            id=\"difficulty\"\n            className=\"form-input\"\n            value={input.difficulty}\n            onChange={handleChange}\n          >\n            <option defaultValue=\"easy\">easy</option>\n            <option defaultValue=\"medium\">medium</option>\n            <option defaultValue=\"hard\">hard</option>\n          </select>\n        </div>\n        <button type=\"submit\" className=\"submit-btn\">\n          start\n        </button>\n      </form>\n    </section>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\n\nimport SetupForm from \"./SetupForm\";\nimport Loading from \"./Loading\";\nimport Modal from \"./Modal\";\nfunction App() {\n  const { isLoading, start } = useGlobalContext();\n  if (isLoading) {\n    return <Loading />;\n  }\n  if (!start) {\n    return <Modal />;\n  }\n  return <SetupForm />;\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { AppProvider } from './context'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}